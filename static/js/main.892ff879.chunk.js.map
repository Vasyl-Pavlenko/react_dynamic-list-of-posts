{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","api/coment.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/user.tsx","api/post.tsx","index.tsx"],"names":["PostsList","posts","openedPost","setOpenedPost","setCommentsList","setIsVisibleForm","className","map","post","id","title","type","classNames","onClick","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","Loader","NewCommentForm","setComments","comments","setIsErrorSide","useState","authorName","setAuthorName","authorEmail","setAuthorEmail","commentText","setCommentText","isLoading","setIsLoading","isEmptyName","setIsEmptyName","isEmptyEmail","setIsEmptyEmail","isEmptyBody","setIsEmptyBody","setAllFieldsNotEmpty","addNewComment","commentData","postId","name","email","Error","catch","error","console","alert","finally","htmlFor","placeholder","value","onChange","event","target","onBlur","test","preventDefault","PostDetails","isLoadingSidebar","isErrorSide","isVisibleForm","handleCommentDelete","commentId","deleteComment","filter","element","useEffect","length","item","href","UserSelector","selectedUser","setSelectedUser","users","setUsersPost","isActiveButton","setIsActivebutton","dropdownRef","useRef","setUserAndPosts","user","handleUserSelection","a","handleClickOutside","current","contains","document","addEventListener","removeEventListener","ref","role","App","setUsers","isError","setIsError","isErrorSideBar","setIsErrorSideBar","setIsLoadingSidebar","setPosts","isEmptyPostMessage","setIsEmptyPostMessage","setUsersList","useMemo","userId","getComments","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.892ff879.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  openedPost: Post | null,\n  setOpenedPost: (args: Post | null) => void,\n  setCommentsList: (args: number) => void,\n  setIsVisibleForm: (args: boolean) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  openedPost,\n  setOpenedPost,\n  setCommentsList,\n  setIsVisibleForm,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">\n      Posts:\n    </p>\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts?.map((post) => (\n          <tr\n            key={post.id}\n            data-cy=\"Post\"\n          >\n            <td data-cy=\"PostId\">\n              {post.id}\n            </td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={classNames(\n                  'button is-link',\n                  { 'is-light': openedPost?.id !== post.id },\n                )}\n                onClick={() => {\n                  setOpenedPost(openedPost === post ? null : post);\n                  setCommentsList(post.id);\n                  setIsVisibleForm(false);\n                }}\n              >\n                {openedPost?.id !== post.id\n                  ? 'Open' : 'Close'}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: unknown = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: unknown) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: unknown) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable no-alert */\n/* eslint-disable no-console */\nimport classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { addComment } from '../api/coment';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  setComments: (args: Comment[]) => void;\n  comments: Comment[];\n  setIsErrorSide: (args: boolean) => void;\n  openedPost: Post | null;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  setComments,\n  comments,\n  setIsErrorSide,\n  openedPost,\n}) => {\n  const [authorName, setAuthorName] = useState('');\n  const [authorEmail, setAuthorEmail] = useState('');\n  const [commentText, setCommentText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isEmptyName, setIsEmptyName] = useState(false);\n  const [isEmptyEmail, setIsEmptyEmail] = useState(false);\n  const [isEmptyBody, setIsEmptyBody] = useState(false);\n\n  const setAllFieldsNotEmpty = () => {\n    setIsEmptyName(false);\n    setIsEmptyEmail(false);\n    setIsEmptyBody(false);\n  };\n\n  const addNewComment = () => {\n    if (authorName && commentText && authorEmail) {\n      const commentData = {\n        postId: openedPost?.id,\n        name: authorName,\n        email: authorEmail,\n        body: commentText,\n      };\n\n      setAllFieldsNotEmpty();\n      setIsLoading(true);\n      addComment(commentData)\n        .then((data) => {\n          if (data) {\n            setComments([...comments, data]);\n          } else {\n            throw new Error('Failed to add comment.');\n          }\n        })\n        .catch((error) => {\n          console.error(error);\n          setIsErrorSide(true);\n          alert('Failed to add comment. Please try again later.');\n        })\n        .finally(() => {\n          setIsLoading(false);\n          setCommentText('');\n        });\n    } else {\n      setIsEmptyName(!authorName);\n      setIsEmptyEmail(!authorEmail);\n      setIsEmptyBody(!commentText);\n    }\n  };\n\n  const handleResetForm = () => {\n    setAllFieldsNotEmpty();\n\n    setAuthorName('');\n    setAuthorEmail('');\n    setCommentText('');\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div\n        className=\"field\"\n        data-cy=\"NameField\"\n      >\n        <label\n          className=\"label\"\n          htmlFor=\"comment-author-name\"\n        >\n          Author Name\n        </label>\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': isEmptyName && !authorName },\n            )}\n            value={authorName}\n            onChange={(event) => {\n              setAuthorName(event.target.value);\n              setIsEmptyName(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n          {(isEmptyName && !authorName) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n        {(isEmptyName && !authorName) && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div\n        className=\"field\"\n        data-cy=\"EmailField\"\n      >\n        <label\n          className=\"label\"\n          htmlFor=\"comment-author-email\"\n        >\n          Author Email\n        </label>\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': isEmptyEmail && !authorEmail },\n            )}\n            value={authorEmail}\n            onChange={(event) => {\n              setAuthorEmail(event.target.value);\n              setIsEmptyEmail(false);\n            }}\n            onBlur={(event) => {\n              const email = event.target.value;\n\n              if (email) {\n                const isValidEmail = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n\n                if (!isValidEmail) {\n                  setIsEmptyEmail(true);\n                  setAuthorEmail('');\n                  alert('Please enter a valid email address.');\n                }\n              }\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {(isEmptyEmail && !authorEmail) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {(isEmptyEmail && !authorEmail) && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div\n        className=\"field\"\n        data-cy=\"BodyField\"\n      >\n        <label\n          className=\"label\"\n          htmlFor=\"comment-body\"\n        >\n          Comment Text\n        </label>\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': isEmptyBody && !commentText },\n            )}\n            value={commentText}\n            onChange={(event) => {\n              setCommentText(event.target.value);\n              setIsEmptyBody(false);\n            }}\n          />\n        </div>\n\n        {(isEmptyBody && !commentText) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isLoading },\n            )}\n            onClick={(event) => {\n              event.preventDefault();\n              addNewComment();\n            }}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={(event) => {\n              event.preventDefault();\n              handleResetForm();\n            }}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment, CommentData } from '../types/Comment';\n\nexport const addComment = (data: CommentData) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useEffect } from 'react';\nimport { deleteComment } from '../api/coment';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  isLoadingSidebar: boolean,\n  comments: Comment[],\n  isErrorSide: boolean,\n  openedPost: Post | null,\n  setIsErrorSide: (arg: boolean) => void,\n  setComments: (arg: Comment[]) => void,\n  isVisibleForm: boolean,\n  setIsVisibleForm: (arg: boolean) => void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  isLoadingSidebar,\n  comments,\n  isErrorSide,\n  openedPost,\n  setIsErrorSide,\n  setComments,\n  isVisibleForm,\n  setIsVisibleForm,\n}) => {\n  const handleCommentDelete = (commentId: number) => {\n    deleteComment(commentId)\n      .then(() => {\n        setComments(comments.filter((element) => element.id !== commentId));\n      })\n      .catch(() => setIsErrorSide(true));\n  };\n\n  const handleFormVisiblity = () => setIsVisibleForm(true);\n\n  useEffect(() => {\n    setComments([]);\n    setIsVisibleForm(false);\n  }, [openedPost]);\n\n  return (\n    <div\n      className=\"content\"\n      data-cy=\"PostDetails\"\n    >\n      <div\n        className=\"content\"\n        data-cy=\"PostDetails\"\n      >\n        {openedPost && (\n          <div className=\"block\">\n            <h2 data-cy=\"PostTitle\">\n              {`#${openedPost?.id}: ${openedPost?.title}`}\n            </h2>\n\n            <p data-cy=\"PostBody\">\n              {openedPost?.body}\n            </p>\n          </div>\n        )}\n\n        <div className=\"block\">\n          {isLoadingSidebar && (\n            <Loader />\n          )}\n          {isErrorSide && (\n            <div\n              className=\"notification is-danger\"\n              data-cy=\"CommentsError\"\n            >\n              Something went wrong\n            </div>\n          )}\n          {!isErrorSide\n            && comments.length === 0\n            && !isVisibleForm\n            && (\n              <p\n                className=\"title is-4\"\n                data-cy=\"NoCommentsMessage\"\n              >\n                No comments yet\n              </p>\n            )}\n          {openedPost\n            && comments.length > 0\n            && (\n              <>\n                <p className=\"title is-4\">\n                  Comments:\n                </p>\n                {comments.map((item) => (\n                  <article\n                    key={item.id}\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                  >\n                    <div className=\"message-header\">\n                      <a\n                        href={`mailto:${item.email}`}\n                        data-cy=\"CommentAuthor\"\n                      >\n                        {item.name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => handleCommentDelete(item.id)}\n                      >\n                        Delete comment\n                      </button>\n                    </div>\n\n                    <div\n                      className=\"message-body\"\n                      data-cy=\"CommentBody\"\n                    >\n                      {item.body}\n                    </div>\n                  </article>\n                ))}\n              </>\n            )}\n          {!isErrorSide\n            && openedPost\n            && comments.length > 0\n            && !isVisibleForm\n            && (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={handleFormVisiblity}\n              >\n                Write a comment\n              </button>\n            )}\n        </div>\n        {isVisibleForm && (\n          <NewCommentForm\n            openedPost={openedPost}\n            comments={comments}\n            setComments={setComments}\n            setIsErrorSide={setIsErrorSide}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\n\ntype Props = {\n  selectedUser: User | null,\n  setSelectedUser: React.Dispatch<React.SetStateAction<User | null>>,\n  users: User[],\n  setUsersPost: (args: User) => void,\n  setOpenedPost: (args: Post | null) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  selectedUser,\n  setSelectedUser,\n  users,\n  setUsersPost,\n  setOpenedPost,\n}) => {\n  const [isActiveButton, setIsActivebutton] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  const setUserAndPosts = (user: User) => {\n    if (selectedUser === user) {\n      return;\n    }\n\n    setOpenedPost(null);\n    setSelectedUser(user);\n    setUsersPost(user);\n  };\n\n  const handleUserSelection = async (event: React.MouseEvent<HTMLAnchorElement>,\n    user: User) => {\n    event.preventDefault();\n    setUserAndPosts(user);\n    setIsActivebutton(false);\n  };\n\n  const handleIsActiveButton = () => setIsActivebutton(!isActiveButton);\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (dropdownRef.current\n      && !dropdownRef.current.contains(event.target as Node)) {\n      setIsActivebutton(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      ref={dropdownRef}\n      className={classNames(\n        'dropdown',\n        { 'is-active': isActiveButton },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleIsActiveButton}\n        >\n          <span>{selectedUser?.name || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i\n              className=\"fas fa-angle-down\"\n              aria-hidden=\"true\"\n            />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {users.length > 0 && users.map((user) => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': user.id === selectedUser?.id },\n              )}\n              onClick={(event) => handleUserSelection(event, user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect, useMemo } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nimport { getUsers } from './api/user';\nimport { getPosts } from './api/post';\nimport { getComments } from './api/coment';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isError, setIsError] = useState(false);\n  const [isErrorSideBar, setIsErrorSideBar] = useState(false);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoadingSidebar, setIsLoadingSidebar] = useState(false);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [openedPost, setOpenedPost] = useState<Post | null>(null);\n  const [isVisibleForm, setIsVisibleForm] = useState(false);\n  const [isEmptyPostMessage, setIsEmptyPostMessage] = useState(false);\n\n  const setUsersList = useMemo(() => () => {\n    getUsers()\n      .then((data) => {\n        setUsers(data);\n        setIsError('error' in data);\n      })\n      .catch(() => setIsError(true));\n  }, []);\n\n  const setUsersPost = (user: User) => {\n    if (user) {\n      setIsLoading(true);\n      setPosts([]);\n\n      getPosts(user.id)\n        .then((data) => {\n          setPosts(data);\n          setIsError('error' in data);\n          setIsEmptyPostMessage(data.length === 0);\n        })\n        .catch(() => setIsError(true))\n        .finally(() => setIsLoading(false));\n    }\n  };\n\n  const setCommentsList = (postId: number) => {\n    if (openedPost?.id === postId) {\n      return;\n    }\n\n    setIsLoadingSidebar(true);\n    getComments(postId)\n      .then((data) => {\n        setComments(data);\n        setIsErrorSideBar('error' in data);\n      })\n      .catch(() => setIsErrorSideBar(true))\n      .finally(() => setIsLoadingSidebar(false));\n  };\n\n  useEffect(() => {\n    setUsersList();\n  }, [setUsersList]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  users={users}\n                  setUsersPost={setUsersPost}\n                  setOpenedPost={setOpenedPost}\n                />\n              </div>\n\n              <div\n                className=\"block\"\n                data-cy=\"MainContent\"\n              >\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && (\n                  <Loader />\n                )}\n\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n                {isEmptyPostMessage && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n                {posts.length > 0 && (\n                  <PostsList\n                    openedPost={openedPost}\n                    setOpenedPost={setOpenedPost}\n                    posts={posts}\n                    setCommentsList={setCommentsList}\n                    setIsVisibleForm={setIsVisibleForm}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              `Sidebar--${openedPost ? 'open' : 'close'}`,\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails\n                setIsErrorSide={setIsErrorSideBar}\n                openedPost={openedPost}\n                isErrorSide={isErrorSideBar}\n                isLoadingSidebar={isLoadingSidebar}\n                comments={comments}\n                setComments={setComments}\n                isVisibleForm={isVisibleForm}\n                setIsVisibleForm={setIsVisibleForm}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const patchPost = (postId: number) => {\n  return client.get<Post[]>(`/posts/${postId}`);\n};\n\nexport const addPost = (data: Post) => {\n  return client.post('/posts', data);\n};\n\nexport const deletePost = (postId: number) => {\n  return client.delete(`/posts/${postId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}