{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","utils/helper.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","postSelected","handleSelectPost","className","map","post","id","title","type","onClick","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","a","method","data","options","body","JSON","stringify","headers","fetch","response","json","client","getUsers","getPosts","userId","getComments","postId","deleteComment","commentId","addComment","comment","Loader","NewCommentForm","handleOnAdd","isNewCommentLoading","useState","name","setName","isNameError","setIsNameError","email","setEmail","isEmailError","setIsEmailError","isEmailValidError","setIsEmailValidError","setBody","isBodyError","setIsBodyError","handleReset","useEffect","onSubmit","event","preventDefault","isNameEmpty","length","isEmailEmpty","isEmailValidFormat","inputEmail","test","isBodyEmpty","htmlFor","placeholder","classNames","value","onChange","target","trimStart","PostDetails","comments","setComments","isLoaderVisible","setIsLoaderVisible","isNewFormVisible","setIsNewFormVisible","isWriteCommentVisible","setIsWriteCommentVisible","isCommentErrorVisible","setIsCommentErrorVisible","hasError","setHasError","setIsNewCommentLoading","loadComments","selectedPost","commentsFromServer","newComment","preparedComment","prev","isCommentsVisible","isNoComments","href","preparedComments","filter","handleOnDelete","UserSelector","handleSelectUser","selectedUserId","users","setUsers","isError","setIsError","showUsers","setShowUsers","wrapperRef","useRef","loadUsers","useCallback","usersFromServer","document","addEventListener","current","contains","selectedUserName","find","user","ref","role","newUserId","App","setSelectedUserId","setPostSelected","setPosts","isPostsVisible","setIsPostsVisible","isPostDetailsVisible","setIsPostDetailsVisible","isSideBarVisible","setIsSideBarVisible","isPostErrorVisible","setIsPostErrorVisible","isEmptyPostMessageVisible","setIsEmptyPostMessageVisible","loadPosts","postsFromServer","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ccebe8b6.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  postSelected: Post | null,\n  handleSelectPost: (post: Post) => void,\n};\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  postSelected,\n  handleSelectPost,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">\n        Posts:\n      </p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr\n              data-cy=\"Post\"\n              key={post.id}\n            >\n              <td data-cy=\"PostId\">\n                {post.id}\n              </td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {postSelected?.id === post.id ? (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link\"\n                    onClick={() => {\n                      handleSelectPost(post);\n                    }}\n                  >\n                    Close\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link is-light\"\n                    onClick={() => {\n                      handleSelectPost(post);\n                    }}\n                  >\n                    Open\n                  </button>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nasync function request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: unknown = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  await wait(300);\n  const response = await fetch(BASE_URL + url, options);\n\n  return response.json();\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: unknown) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: unknown) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\nimport { User } from '../types/User';\nimport { client } from './fetchClient';\n\nexport const getUsers = async () => {\n  const response = await client.get<User[]>('/users');\n\n  return response;\n};\n\nexport const getPosts = async (userId: number) => {\n  const response = await client.get<Post[]>(`/posts?userId=${userId}`);\n\n  return response;\n};\n\nexport const getComments = async (postId: number) => {\n  const response = await client.get<Comment[]>(`/comments?postId=${postId}`);\n\n  return response;\n};\n\nexport const deleteComment = async (commentId: number) => {\n  const response = await client.delete(`/comments/${commentId}`);\n\n  return response;\n};\n\nexport const addComment = async (comment: CommentData) => {\n  const response = await client.post<Comment>('/comments', comment);\n\n  return response;\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { FormEvent, useEffect, useState } from 'react';\nimport { CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  handleOnAdd: (newComment: CommentData) => void,\n  isNewCommentLoading: boolean,\n  postSelected: Post | null,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  handleOnAdd,\n  isNewCommentLoading,\n  postSelected,\n}) => {\n  const [name, setName] = useState('');\n  const [isNameError, setIsNameError] = useState(false);\n  const [email, setEmail] = useState('');\n  const [isEmailError, setIsEmailError] = useState(false);\n  const [isEmailValidError, setIsEmailValidError] = useState(false);\n  const [body, setBody] = useState('');\n  const [isBodyError, setIsBodyError] = useState(false);\n\n  const handleReset = () => {\n    setIsBodyError(false);\n    setIsEmailError(false);\n    setIsEmailValidError(false);\n    setIsNameError(false);\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  useEffect(() => {\n    handleReset();\n  }, [postSelected]);\n\n  const handleAdd = (event: FormEvent) => {\n    event.preventDefault();\n\n    const isNameEmpty = name.length === 0;\n    const isEmailEmpty = email.length === 0;\n    const isEmailValidFormat = (inputEmail: string): boolean => {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n      return emailRegex.test(inputEmail);\n    };\n\n    const isBodyEmpty = body.length === 0;\n\n    setIsNameError(isNameEmpty);\n    setIsEmailError(isEmailEmpty);\n    setIsEmailValidError(!isEmailValidFormat(email));\n    setIsBodyError(isBodyEmpty);\n\n    if (isNameEmpty\n      || isEmailEmpty\n      || isBodyEmpty\n      || !isEmailValidFormat(email)\n    ) {\n      return;\n    }\n\n    const newComment: CommentData = {\n      name,\n      email,\n      body,\n    };\n\n    handleOnAdd(newComment);\n    setBody('');\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleAdd}\n    >\n      <div\n        className=\"field\"\n        data-cy=\"NameField\"\n      >\n        <label\n          className=\"label\"\n          htmlFor=\"comment-author-name\"\n        >\n          Author Name\n        </label>\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': isNameError,\n            })}\n            value={name}\n            onChange={({ target }) => {\n              setName(target.value.trimStart());\n              setIsNameError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n          {isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n        {isNameError && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div\n        className=\"field\"\n        data-cy=\"EmailField\"\n      >\n        <label\n          className=\"label\"\n          htmlFor=\"comment-author-email\"\n        >\n          Author Email\n        </label>\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': isEmailError,\n            })}\n            value={email}\n            onChange={({ target }) => {\n              setEmail(target.value.trimStart());\n              setIsEmailError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n          {isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n        {isEmailError && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Email is required\n          </p>\n        )}\n\n        {isEmailValidError && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Email is not valid\n          </p>\n        )}\n      </div>\n\n      <div\n        className=\"field\"\n        data-cy=\"BodyField\"\n      >\n        <label\n          className=\"label\"\n          htmlFor=\"comment-body\"\n        >\n          Comment Text\n        </label>\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': isBodyError,\n            })}\n            value={body}\n            onChange={({ target }) => {\n              setBody(target.value.trimStart());\n              setIsBodyError(false);\n            }}\n          />\n        </div>\n        {isBodyError && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isNewCommentLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { addComment, deleteComment, getComments } from '../utils/helper';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  post: Post | null,\n  postSelected: Post | null,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n  postSelected,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoaderVisible, setIsLoaderVisible] = useState(false);\n  const [isNewFormVisible, setIsNewFormVisible] = useState(false);\n  const [isWriteCommentVisible, setIsWriteCommentVisible] = useState(false);\n  const [isCommentErrorVisible, setIsCommentErrorVisible] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [isNewCommentLoading, setIsNewCommentLoading] = useState(false);\n\n  const loadComments = async (selectedPost: Post) => {\n    setIsLoaderVisible(true);\n\n    try {\n      const commentsFromServer = await getComments(selectedPost.id);\n\n      setComments(commentsFromServer);\n      setIsCommentErrorVisible(false);\n      setIsWriteCommentVisible(true);\n    } catch {\n      setIsCommentErrorVisible(true);\n    } finally {\n      setIsLoaderVisible(false);\n    }\n  };\n\n  useEffect(() => {\n    if (post !== null) {\n      loadComments(post);\n      setIsNewFormVisible(false);\n    }\n  }, [post]);\n\n  const handleOnDelete = (id: number) => {\n    if (post === null) {\n      return;\n    }\n\n    try {\n      deleteComment(id);\n      const preparedComments = comments.filter(comment => comment.id !== id);\n\n      setComments(preparedComments);\n    } catch {\n      setHasError(true);\n    }\n  };\n\n  const handleOnAdd = async (newComment: CommentData) => {\n    const preparedComment = { ...newComment, postId: post?.id };\n\n    setIsNewCommentLoading(true);\n\n    try {\n      const comment = await addComment(preparedComment);\n\n      setComments(prev => [...prev, comment]);\n    } catch {\n      setHasError(true);\n    } finally {\n      setIsNewCommentLoading(false);\n    }\n  };\n\n  const handleShowNewForm = () => {\n    setIsNewFormVisible(true);\n  };\n\n  if (hasError) {\n    return (\n      <div\n        className=\"notification is-danger\"\n        data-cy=\"CommentsError\"\n      >\n        Something went wrong\n      </div>\n    );\n  }\n\n  const isCommentsVisible = (comments.length > 0 && !isLoaderVisible);\n  const isNoComments = comments.length === 0\n    && !isLoaderVisible\n    && !isCommentErrorVisible;\n\n  return (\n    <div\n      className=\"content\"\n      data-cy=\"PostDetails\"\n    >\n      <div\n        className=\"content\"\n        data-cy=\"PostDetails\"\n      >\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoaderVisible && <Loader />}\n          {isCommentErrorVisible && (\n            <div\n              className=\"notification is-danger\"\n              data-cy=\"CommentsError\"\n            >\n              Something went wrong!\n            </div>\n          )}\n\n          {isNoComments && (\n            <p\n              className=\"title is-4\"\n              data-cy=\"NoCommentsMessage\"\n            >\n              No comments yet\n            </p>\n          )}\n\n          {isCommentsVisible && (\n            <>\n              <p className=\"title is-4\">\n                Comments:\n              </p>\n              {comments.map(comment => (\n                <article\n                  key={comment.id}\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a\n                      href={`mailto:${comment.email}`}\n                      data-cy=\"CommentAuthor\"\n                    >\n                      {comment.name}\n                    </a>\n\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => {\n                        handleOnDelete(comment.id);\n                      }}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div\n                    className=\"message-body\"\n                    data-cy=\"CommentBody\"\n                  >\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {isNewFormVisible && (\n            <NewCommentForm\n              handleOnAdd={handleOnAdd}\n              isNewCommentLoading={isNewCommentLoading}\n              postSelected={postSelected}\n            />\n          )}\n\n          {(isWriteCommentVisible\n            && !isNewFormVisible)\n            && (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={handleShowNewForm}\n              >\n                Write a comment\n              </button>\n            )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\nimport { getUsers } from '../utils/helper';\n\ntype Props = {\n  handleSelectUser: (id: number) => void,\n  selectedUserId: number,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  handleSelectUser,\n  selectedUserId,\n}) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [showUsers, setShowUsers] = useState(false);\n  const wrapperRef = useRef<HTMLDivElement>(null);\n\n  const loadUsers = useCallback(async () => {\n    try {\n      const usersFromServer = await getUsers();\n\n      return setUsers(usersFromServer);\n    } catch {\n      return setIsError(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const handleLoadUsers = () => {\n    if (showUsers) {\n      setShowUsers(false);\n    } else {\n      setShowUsers(true);\n    }\n  };\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (wrapperRef.current\n        && !wrapperRef.current.contains(event.target as Node)) {\n        setShowUsers(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n  }, [wrapperRef]);\n\n  const handleChangeUser = (newUserId: number) => {\n    setShowUsers(false);\n    handleSelectUser(newUserId);\n  };\n\n  const selectedUserName = users.find(user => user.id === selectedUserId)?.name;\n\n  if (isError) {\n    return (\n      <div className=\"notification is-danger\">\n        Something went wrong!\n      </div>\n    );\n  }\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      ref={wrapperRef}\n      className={classNames('dropdown', {\n        'is-active': showUsers,\n      })}\n    >\n\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleLoadUsers}\n        >\n          <span>\n            {\n              selectedUserId\n                ? selectedUserName\n                : 'Choose a user'\n            }\n          </span>\n\n          <span className=\"icon is-small\">\n            <i\n              className=\"fas fa-angle-down\"\n              aria-hidden=\"true\"\n            />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              href={`#user-${user.id}`}\n              className={classNames('dropdown-item',\n                { 'is-active': selectedUserId === user.id })}\n              key={user.id}\n              onClick={() => {\n                handleChangeUser(user.id);\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { Post } from './types/Post';\nimport { getPosts } from './utils/helper';\n\nexport const App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [postSelected, setPostSelected] = useState<Post | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoaderVisible, setIsLoaderVisible] = useState(false);\n  const [isPostsVisible, setIsPostsVisible] = useState(false);\n  const [isPostDetailsVisible, setIsPostDetailsVisible] = useState(false);\n  const [isSideBarVisible, setIsSideBarVisible] = useState(false);\n  const [isPostErrorVisible, setIsPostErrorVisible] = useState(false);\n  const [isEmptyPostMessageVisible,\n    setIsEmptyPostMessageVisible] = useState(false);\n\n  const loadPosts = async () => {\n    setIsLoaderVisible(true);\n    setIsEmptyPostMessageVisible(false);\n    setIsPostsVisible(false);\n\n    try {\n      const postsFromServer = await getPosts(selectedUserId);\n\n      setPosts(postsFromServer);\n      setIsPostErrorVisible(false);\n      if (postsFromServer.length === 0) {\n        setIsEmptyPostMessageVisible(true);\n      } else {\n        setIsPostsVisible(true);\n      }\n    } catch {\n      setIsPostErrorVisible(true);\n    } finally {\n      setIsLoaderVisible(false);\n    }\n  };\n\n  useEffect(() => {\n    if (selectedUserId) {\n      loadPosts();\n    }\n  }, [selectedUserId]);\n\n  const handleSelectPost = (post: Post) => {\n    if (postSelected?.id === post.id) {\n      setIsSideBarVisible(false);\n      setIsPostDetailsVisible(false);\n      setPostSelected(null);\n    } else {\n      setPostSelected(post);\n      setIsSideBarVisible(true);\n      setIsPostDetailsVisible(true);\n    }\n  };\n\n  const handleSelectUser = (newUserId: number) => {\n    setSelectedUserId(newUserId);\n    setPostSelected(null);\n    setIsPostDetailsVisible(false);\n    setIsSideBarVisible(false);\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  handleSelectUser={handleSelectUser}\n                  selectedUserId={selectedUserId}\n                />\n              </div>\n\n              <div\n                className=\"block\"\n                data-cy=\"MainContent\"\n              >\n                {selectedUserId === 0 && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n                {isPostErrorVisible && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n                {isLoaderVisible && <Loader />}\n\n                {isEmptyPostMessageVisible && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {isPostsVisible && (\n                  <PostsList\n                    posts={posts}\n                    postSelected={postSelected}\n                    handleSelectPost={handleSelectPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': isSideBarVisible },\n            )}\n          >\n            {isPostDetailsVisible && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  post={postSelected}\n                  postSelected={postSelected}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}