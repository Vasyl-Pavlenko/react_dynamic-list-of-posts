{"version":3,"sources":["utils/fetchClient.ts","api/post.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","api/coment.tsx","components/PostDetails.tsx","components/UserSelector.tsx","components/NoCommentsMessage.tsx","App.tsx","api/user.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","deletePost","postId","PostsList","posts","setPosts","openedPost","setIsErrorSide","setOpenedPost","setCommentsList","setIsVisibleForm","useState","selectedPosts","setSelectedPosts","className","map","post","type","checked","includes","id","onChange","prevSelectedPosts","filter","title","classNames","onClick","catch","length","forEach","Loader","NewCommentForm","setComments","comments","authorName","setAuthorName","authorEmail","setAuthorEmail","commentText","setCommentText","isLoading","setIsLoading","isEmptyName","setIsEmptyName","isEmptyEmail","setIsEmptyEmail","isEmptyBody","setIsEmptyBody","setAllFieldsNotEmpty","addNewComment","commentData","name","email","Error","error","console","alert","finally","htmlFor","placeholder","value","event","target","onBlur","test","preventDefault","PostDetails","isLoadingSidebar","isErrorSide","isVisibleForm","handleCommentDelete","commentId","deleteComment","element","useEffect","item","href","UserSelector","selectedUser","setSelectedUser","users","setUsersPost","isActiveButton","setIsActivebutton","dropdownRef","useRef","setUserAndPosts","user","handleUserSelection","a","handleClickOutside","current","contains","document","addEventListener","removeEventListener","ref","role","NoCommentsMessage","App","setUsers","isError","setIsError","isErrorSideBar","setIsErrorSideBar","setIsLoadingSidebar","isEmptyPostMessage","setIsEmptyPostMessage","setUsersList","useMemo","userId","getComments","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7d620957.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: unknown = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: unknown) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: unknown) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const patchPost = (postId: number) => {\n  return client.get<Post[]>(`/posts/${postId}`);\n};\n\nexport const addPost = (data: Post) => {\n  return client.post('/posts', data);\n};\n\nexport const deletePost = (postId: number) => {\n  return client.delete(`/posts/${postId}`);\n};\n","/* eslint-disable react/button-has-type */\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\nimport { deletePost } from '../api/post';\n\ntype Props = {\n  posts: Post[],\n  setPosts: (posts: Post[]) => void,\n  setIsErrorSide: (arg: boolean) => void,\n  openedPost: Post | null,\n  setOpenedPost: (post: Post | null) => void,\n  setCommentsList: (postId: number) => void,\n  setIsVisibleForm: (isVisible: boolean) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  setPosts,\n  openedPost,\n  setIsErrorSide,\n  setOpenedPost,\n  setCommentsList,\n  setIsVisibleForm,\n}) => {\n  const [selectedPosts, setSelectedPosts] = useState<number[]>([]);\n\n  const handleCheckboxChange = (postId: number) => {\n    setSelectedPosts((prevSelectedPosts) => {\n      if (prevSelectedPosts.includes(postId)) {\n        return prevSelectedPosts.filter((id) => id !== postId);\n      }\n\n      return [...prevSelectedPosts, postId];\n    });\n  };\n\n  const handleDeletePost = (postId: number) => {\n    deletePost(postId)\n      .then(() => {\n        setPosts(posts.filter((post) => post.id !== postId));\n      })\n      .catch(() => setIsErrorSide(true));\n  };\n\n  const handleDeleteMultiplePosts = () => {\n    selectedPosts.forEach((postId) => {\n      deletePost(postId)\n        .then(() => { })\n        .catch(() => setIsErrorSide(true));\n    });\n    setSelectedPosts([]);\n    setPosts(posts.filter((post) => !selectedPosts.includes(post.id)));\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">\n        Posts:\n      </p>\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map((post) => (\n            <tr key={post.id}>\n              <td>\n                <label className=\"checkbox\">\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedPosts.includes(post.id)}\n                    onChange={() => handleCheckboxChange(post.id)}\n                  />\n                  <span>{post.id}</span>\n                </label>\n              </td>\n              <td>\n                {post.title}\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button is-link',\n                    { 'is-light': openedPost?.id !== post.id },\n                  )}\n                  onClick={() => {\n                    setOpenedPost(openedPost === post ? null : post);\n                    setCommentsList(post.id);\n                    setIsVisibleForm(false);\n                  }}\n                >\n                  {openedPost?.id !== post.id\n                    ? 'Open' : 'Close'}\n                </button>\n                <button\n                  className=\"button is-danger is-small\"\n                  onClick={() => handleDeletePost(post.id)}\n                >\n                  Delete\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      {selectedPosts.length > 0 && (\n        <div className=\"mt-3\">\n          <button\n            className=\"button is-danger is-small\"\n            onClick={handleDeleteMultiplePosts}\n          >\n            Delete Selected\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable no-alert */\n/* eslint-disable no-console */\nimport classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { addComment } from '../api/coment';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  setComments: (args: Comment[]) => void;\n  comments: Comment[];\n  setIsErrorSide: (args: boolean) => void;\n  openedPost: Post | null;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  setComments,\n  comments,\n  setIsErrorSide,\n  openedPost,\n}) => {\n  const [authorName, setAuthorName] = useState('');\n  const [authorEmail, setAuthorEmail] = useState('');\n  const [commentText, setCommentText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isEmptyName, setIsEmptyName] = useState(false);\n  const [isEmptyEmail, setIsEmptyEmail] = useState(false);\n  const [isEmptyBody, setIsEmptyBody] = useState(false);\n\n  const setAllFieldsNotEmpty = () => {\n    setIsEmptyName(false);\n    setIsEmptyEmail(false);\n    setIsEmptyBody(false);\n  };\n\n  const addNewComment = () => {\n    if (authorName && commentText && authorEmail) {\n      const commentData = {\n        postId: openedPost?.id,\n        name: authorName,\n        email: authorEmail,\n        body: commentText,\n      };\n\n      setAllFieldsNotEmpty();\n      setIsLoading(true);\n      addComment(commentData)\n        .then((data) => {\n          if (data) {\n            setComments([...comments, data]);\n          } else {\n            throw new Error('Failed to add comment.');\n          }\n        })\n        .catch((error) => {\n          console.error(error);\n          setIsErrorSide(true);\n          alert('Failed to add comment. Please try again later.');\n        })\n        .finally(() => {\n          setIsLoading(false);\n          setCommentText('');\n        });\n    } else {\n      setIsEmptyName(!authorName);\n      setIsEmptyEmail(!authorEmail);\n      setIsEmptyBody(!commentText);\n    }\n  };\n\n  const handleResetForm = () => {\n    setAllFieldsNotEmpty();\n\n    setAuthorName('');\n    setAuthorEmail('');\n    setCommentText('');\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div\n        className=\"field\"\n        data-cy=\"NameField\"\n      >\n        <label\n          className=\"label\"\n          htmlFor=\"comment-author-name\"\n        >\n          Author Name\n        </label>\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': isEmptyName && !authorName },\n            )}\n            value={authorName}\n            onChange={(event) => {\n              setAuthorName(event.target.value);\n              setIsEmptyName(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n          {(isEmptyName && !authorName) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n        {(isEmptyName && !authorName) && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div\n        className=\"field\"\n        data-cy=\"EmailField\"\n      >\n        <label\n          className=\"label\"\n          htmlFor=\"comment-author-email\"\n        >\n          Author Email\n        </label>\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': isEmptyEmail && !authorEmail },\n            )}\n            value={authorEmail}\n            onChange={(event) => {\n              setAuthorEmail(event.target.value);\n              setIsEmptyEmail(false);\n            }}\n            onBlur={(event) => {\n              const email = event.target.value;\n\n              if (email) {\n                const isValidEmail = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n\n                if (!isValidEmail) {\n                  setIsEmptyEmail(true);\n                  setAuthorEmail('');\n                  alert('Please enter a valid email address.');\n                }\n              }\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {(isEmptyEmail && !authorEmail) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {(isEmptyEmail && !authorEmail) && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div\n        className=\"field\"\n        data-cy=\"BodyField\"\n      >\n        <label\n          className=\"label\"\n          htmlFor=\"comment-body\"\n        >\n          Comment Text\n        </label>\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': isEmptyBody && !commentText },\n            )}\n            value={commentText}\n            onChange={(event) => {\n              setCommentText(event.target.value);\n              setIsEmptyBody(false);\n            }}\n          />\n        </div>\n\n        {(isEmptyBody && !commentText) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isLoading },\n            )}\n            onClick={(event) => {\n              event.preventDefault();\n              addNewComment();\n            }}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={(event) => {\n              event.preventDefault();\n              handleResetForm();\n            }}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment, CommentData } from '../types/Comment';\n\nexport const addComment = (data: CommentData) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useEffect } from 'react';\nimport { deleteComment } from '../api/coment';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  isLoadingSidebar: boolean,\n  comments: Comment[],\n  isErrorSide: boolean,\n  openedPost: Post | null,\n  setIsErrorSide: (arg: boolean) => void,\n  setComments: (arg: Comment[]) => void,\n  isVisibleForm: boolean,\n  setIsVisibleForm: (arg: boolean) => void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  isLoadingSidebar,\n  comments,\n  isErrorSide,\n  openedPost,\n  setIsErrorSide,\n  setComments,\n  isVisibleForm,\n  setIsVisibleForm,\n}) => {\n  const handleCommentDelete = (commentId: number) => {\n    deleteComment(commentId)\n      .then(() => {\n        setComments(comments.filter((element) => element.id !== commentId));\n      })\n      .catch(() => setIsErrorSide(true));\n  };\n\n  const handleFormVisiblity = () => setIsVisibleForm(true);\n\n  useEffect(() => {\n    setComments([]);\n    setIsVisibleForm(false);\n  }, [openedPost]);\n\n  return (\n    <div\n      className=\"content\"\n      data-cy=\"PostDetails\"\n    >\n      <div\n        className=\"content\"\n        data-cy=\"PostDetails\"\n      >\n        {openedPost && (\n          <div className=\"block\">\n            <h2 data-cy=\"PostTitle\">\n              {`#${openedPost?.id}: ${openedPost?.title}`}\n            </h2>\n\n            <p data-cy=\"PostBody\">\n              {openedPost?.body}\n            </p>\n          </div>\n        )}\n\n        <div className=\"block\">\n          {isLoadingSidebar && (\n            <Loader />\n          )}\n          {isErrorSide && (\n            <div\n              className=\"notification is-danger\"\n              data-cy=\"CommentsError\"\n            >\n              Something went wrong\n            </div>\n          )}\n          {!isErrorSide\n            && comments.length === 0\n            && !isVisibleForm\n            && openedPost\n            && (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            )}\n          {openedPost\n            && comments.length > 0\n            && (\n              <>\n                <p className=\"title is-4\">\n                  Comments:\n                </p>\n                {comments.map((item) => (\n                  <article\n                    key={item.id}\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                  >\n                    <div className=\"message-header\">\n                      <a\n                        href={`mailto:${item.email}`}\n                        data-cy=\"CommentAuthor\"\n                      >\n                        {item.name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => handleCommentDelete(item.id)}\n                      >\n                        Delete comment\n                      </button>\n                    </div>\n\n                    <div\n                      className=\"message-body\"\n                      data-cy=\"CommentBody\"\n                    >\n                      {item.body}\n                    </div>\n                  </article>\n                ))}\n              </>\n            )}\n          {!isErrorSide\n            && openedPost\n            && !isVisibleForm\n            && (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={handleFormVisiblity}\n              >\n                Write a comment\n              </button>\n            )}\n        </div>\n        {isVisibleForm && (\n          <NewCommentForm\n            openedPost={openedPost}\n            comments={comments}\n            setComments={setComments}\n            setIsErrorSide={setIsErrorSide}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\n\ntype Props = {\n  selectedUser: User | null,\n  setSelectedUser: React.Dispatch<React.SetStateAction<User | null>>,\n  users: User[],\n  setUsersPost: (args: User) => void,\n  setOpenedPost: (args: Post | null) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  selectedUser,\n  setSelectedUser,\n  users,\n  setUsersPost,\n  setOpenedPost,\n}) => {\n  const [isActiveButton, setIsActivebutton] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  const setUserAndPosts = (user: User) => {\n    if (selectedUser === user) {\n      return;\n    }\n\n    setOpenedPost(null);\n    setSelectedUser(user);\n    setUsersPost(user);\n  };\n\n  const handleUserSelection = async (event: React.MouseEvent<HTMLAnchorElement>,\n    user: User) => {\n    event.preventDefault();\n    setUserAndPosts(user);\n    setIsActivebutton(false);\n  };\n\n  const handleIsActiveButton = () => setIsActivebutton(!isActiveButton);\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (dropdownRef.current\n      && !dropdownRef.current.contains(event.target as Node)) {\n      setIsActivebutton(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      ref={dropdownRef}\n      className={classNames(\n        'dropdown',\n        { 'is-active': isActiveButton },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleIsActiveButton}\n        >\n          <span>{selectedUser?.name || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i\n              className=\"fas fa-angle-down\"\n              aria-hidden=\"true\"\n            />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {users.length > 0 && users.map((user) => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': user.id === selectedUser?.id },\n              )}\n              onClick={(event) => handleUserSelection(event, user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const NoCommentsMessage = () => {\n  return (\n    <article className=\"message is-small\">\n      <div className=\"message-body\">\n        No comments yet.\n      </div>\n    </article>\n  );\n};\n","import React, { useState, useEffect, useMemo } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { NoCommentsMessage } from './components/NoCommentsMessage';\nimport { Loader } from './components/Loader';\n\nimport { getUsers } from './api/user';\nimport { getPosts } from './api/post';\nimport { getComments } from './api/coment';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isError, setIsError] = useState(false);\n  const [isErrorSideBar, setIsErrorSideBar] = useState(false);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoadingSidebar, setIsLoadingSidebar] = useState(false);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [openedPost, setOpenedPost] = useState<Post | null>(null);\n  const [isVisibleForm, setIsVisibleForm] = useState(false);\n  const [isEmptyPostMessage, setIsEmptyPostMessage] = useState(false);\n\n  const setUsersList = useMemo(() => () => {\n    getUsers()\n      .then((data) => {\n        setUsers(data);\n        setIsError('error' in data);\n      })\n      .catch(() => setIsError(true));\n  }, []);\n\n  const setUsersPost = (user: User) => {\n    if (user) {\n      setIsLoading(true);\n      setPosts([]);\n\n      getPosts(user.id)\n        .then((data) => {\n          setPosts(data);\n          setIsError('error' in data);\n          setIsEmptyPostMessage(data.length === 0);\n        })\n        .catch(() => setIsError(true))\n        .finally(() => setIsLoading(false));\n    }\n  };\n\n  const setCommentsList = (postId: number) => {\n    if (openedPost?.id === postId) {\n      return;\n    }\n\n    setIsLoadingSidebar(true);\n    getComments(postId)\n      .then((data) => {\n        setComments(data);\n        setIsErrorSideBar('error' in data);\n      })\n      .catch(() => setIsErrorSideBar(true))\n      .finally(() => setIsLoadingSidebar(false));\n  };\n\n  useEffect(() => {\n    setUsersList();\n  }, [setUsersList]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  users={users}\n                  setUsersPost={setUsersPost}\n                  setOpenedPost={setOpenedPost}\n                />\n              </div>\n\n              <div\n                className=\"block\"\n                data-cy=\"MainContent\"\n              >\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && (\n                  <Loader />\n                )}\n\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n                {isEmptyPostMessage && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n                {posts.length > 0 && (\n                  <PostsList\n                    openedPost={openedPost}\n                    setOpenedPost={setOpenedPost}\n                    posts={posts}\n                    setCommentsList={setCommentsList}\n                    setIsVisibleForm={setIsVisibleForm}\n                    setIsErrorSide={setIsErrorSideBar}\n                    setPosts={setPosts}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              `Sidebar--${openedPost ? 'open' : 'close'}`,\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails\n                setIsErrorSide={setIsErrorSideBar}\n                openedPost={openedPost}\n                isErrorSide={isErrorSideBar}\n                isLoadingSidebar={isLoadingSidebar}\n                comments={comments}\n                setComments={setComments}\n                isVisibleForm={isVisibleForm}\n                setIsVisibleForm={setIsVisibleForm}\n              >\n                {comments.length === 0 && <NoCommentsMessage />}\n              </PostDetails>\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}